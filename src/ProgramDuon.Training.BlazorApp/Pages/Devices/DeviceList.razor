@page "/devices"
@inject IDeviceApiService Api
@using Microsoft.AspNetCore.Components.Web.Virtualization

<h3>DeviceList</h3>

<SearchBarComponent OnSearch="Search" />

<a href="/devices/create" class="btn-floating btn-large waves-effect waves-light red"><i class="material-icons">add</i></a>

@if (devices is null)
{
    <LoadingComponent Message="Loading...">
        <div>
            <img src="https://upload.wikimedia.org/wikipedia/commons/d/df/Different_devices.svg" />
        </div>
    </LoadingComponent>
}
else
{
    <ul class="collection" style="height:500px;overflow-y:scroll">

        @*@foreach (var device in devices)
        {
            <DeviceComponent Device="@device" />
        }*@

       @* <Virtualize Context="device" Items="@devices"
            ItemSize="25"  >
            <DeviceComponent Device="@device" />
        </Virtualize>*@

        <Virtualize Context="device" ItemsProvider="@LoadDevices"
            ItemSize="25"  >
            <DeviceComponent Device="@device" />
        </Virtualize>
        

    </ul>
}

@code {

    private ICollection<Device>? devices;

    private async ValueTask<ItemsProviderResult<Device>> LoadDevices(ItemsProviderRequest request)
    {
        var filteredDevices = devices
                .Skip(request.StartIndex)
                .Take(request.Count);

        // TODO: Call to API
        return new ItemsProviderResult<Device>(filteredDevices, devices.Count);
    }

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(3000);

        devices = new List<Device>(await Api.GetAllAsync());
    }

    private async Task Search(string searchText)
    {
        // ...
    }

}
